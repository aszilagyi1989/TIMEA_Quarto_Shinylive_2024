---
title: ""
format: html
filters: 
 - shinylive
resources: 
 - shinylive-sw.js  # Required to publish the shinylive service worker
 - fruit-data.csv   # Required to make sure the data is uploaded alongside the application
---

# ```{r echo = FALSE}
# #| context: setup
# #| warning: false
# #| message: false
# # myfile <- file.path("csv", "timea_mutatok_2024.csv") 
# telepules_ATTRIBUTES <- read.csv("csv/timea_mutatok_2024.csv", sep = ";", row.names = NULL)
# ```

```{shinylive-r}
#| standalone: true
#| viewerHeight: 600
## file: app.R
library(shiny)

ui <- fluidPage(
  titlePanel("Hello Shiny!"),
  h3("Data URL"),
  verbatimTextOutput("urlText"),
  h3("Working Directory"),
  verbatimTextOutput("workingDirectory"),
  h3("File System Information"),
  verbatimTextOutput("fileSystem"),
  h3("Downloaded Data by Relative URL"),
  verbatimTextOutput("retrievedData")
)

server <- function(input, output, session) {
  
  data_url <- "https://tutorials.thecoatlessprofessor.com/r-shinylive-data-include/fruit-data.csv"
  
  output$urlText <- renderText({
    data_url
  })
  
  output$fileSystem <- renderPrint({
    list.files()
  })

  output$workingDirectory <- renderPrint({
    getwd()
  })

  output$retrievedData <- renderPrint({
    download.file(data_url, "fruit-data.csv")
    read.csv("fruit-data.csv")
  })
  
}

# Create Shiny app ----
shinyApp(ui = ui, server = server)
```

# ```{webr}
# #| context: setup
# #| warning: false
# #| message: false
# telepules_ATTRIBUTES <- read.csv("csv/timea_mutatok_2024.csv", sep = ";", row.names = NULL)
# ```
# 
# ```{shinylive-r}
# #| standalone: true
# #| viewerHeight: 800
# library(shiny)
# library("dplyr")
# library("sf")
# 
# # telepules_ATTRIBUTES <- read.csv("csv/timea_mutatok_2024.csv", sep = ";", row.names = NULL)
# 
# ui <- fluidPage(
#   titlePanel("Térképes Interaktív Megjelenítő Alkalmazás"),
#   sidebarLayout(
#     sidebarPanel(
#       sliderInput(
#         inputId = "bins",
#         label = "Number of bins:",
#         min = 1,
#         max = 50,
#         value = 30
#       ),
#       uiOutput("focsop"),
#       uiOutput("mutato"),
#       uiOutput("year"),
#       hr(),
#       uiOutput("search"),
#       sliderInput("alpha",
#                   "Fedettség:",
#                   min = 20,
#                   max = 100,
#                   value = 80)
#     ),
#     mainPanel(
#       plotOutput(outputId = "distPlot")
#     )
#   )
# )
# 
# 
# server <- function(input, output) {
#   
#   # observe({
#   # 
#   # telepules_ATTRIBUTES <- reactive({read.csv("timea_mutatok_2024.csv", sep = ";", row.names = NULL)})
#   # 
#   # })
# 
#   output$focsop <- renderUI({
#     
#     # telepules_ATTRIBUTES <- reactive({read.csv("csv/timea_mutatok_2024.csv", sep = ";", row.names = NULL)})
#     
#     selectInput(
#       "focsop", 
#       "Főcsoport",
#       choices = unique(telepules_ATTRIBUTES$MUTATO_FOCSOP_MEGNEV), 
#       selected = unique(telepules_ATTRIBUTES$MUTATO_FOCSOP_MEGNEV)[1]
#       )
#     
#   })
#   
#   # telepules_ATTRIBUTES <- reactive({
#   #   
#   #   myfile <- file.path("csv", "timea_mutatok_2024.csv") 
#   #   read.csv(myfile, sep = ";", row.names = NULL)
#   #   
#   # })
#   
#   subsetted <- reactive({
#     
#     # req(input$focsop)
#     # req(input$mutato)
#     # req(input$search)
#     # req(input$year)
#     # req(input$color)
#     
#     if (input$search != "Magyarország"){
# 
#       telepules_MAP %>% filter(MUTATO_FOCSOP_MEGNEV %in% input$focsop & MUTATO_MEGNEV %in% input$mutato & VON_IDO %in% input$year & Megyenév %in% input$search)
# 
#     }else{
#       
#       telepules_MAP %>% filter(MUTATO_FOCSOP_MEGNEV %in% input$focsop & MUTATO_MEGNEV %in% input$mutato & VON_IDO %in% input$year)
#       
#     }
#     
#   })
# 
# 
#   
#   output$distPlot <- renderPlot({
#     
#     x <- faithful$waiting
#     bins <- seq(min(x), max(x), length.out = input$bins + 1)
#     hist(x,
#       breaks = bins, col = "#75AADB", border = "white",
#       xlab = "Waiting time to next eruption (in mins)",
#       main = "Histogram of waiting times"
#     )
#     
#   })
#   
# }
# 
# shinyApp(ui = ui, server = server)
# ```